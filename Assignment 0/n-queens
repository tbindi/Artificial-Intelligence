# npieces.py : Solve the N-Pieces problem!
# D. Crandall, August 2016
#
# The N-pieces problem is: Given an empty NxN chessboard, place N pieces on the board so that no queen
# can take any other, i.e. such that no two pieces share the same row, column, or diagonal.

# This is N, the size of the board.
N=25

# Count # of pieces in given row
def count_on_row(board, row):
    sum = 0
    for col in range(0, N):
        sum += board[row][col]
    return sum

# Count # of pieces in given column
def count_on_col(board, col):
    sum = 0
    for row in range(0, N):
        sum += board[row][col]
    return sum

# Count total # of pieces on board
def count_pieces(board):
    sum = 0
    for row in range(0, N):
        for col in range(0, N):
            sum += board[row][col]
    return sum

# Return a string with the board rendered in a human-friendly format
def printable_board(board):
    return "\n".join([ " ".join([ "Q" if col else "_" for col in row ]) for row in board])

# Add a piece to the board at the given position, and return a new board (doesn't change original)
def add_piece(board, row, col):
    return board[0:row] + [board[row][0:col] + [1,] + board[row][col+1:]] + board[row+1:]

# Get list of successors of given board state
# *** original, broken version!
def successors(board):
    succ = []
    for r in range(0, N):
        for c in range(0, N):
            succ += [ add_piece(board, r, c), ]
    return succ

# Get list of successors of given board state
# *** better version, avoids too many rooks on board or not adding any
def successors2(board):
    succ = []
    if count_pieces(board) < N:
        for r in range (0, N):
            for c in range(0, N):
                if board[r][c] == 0:
                    succ += [add_piece(board, r, c), ]
    return succ

# Get list of successors of given board state
# *** best version, fills in rooks from left to right and avoiding conflicts with existing rooks. e.g.:
# 100                   100      100
# 000 's succesors are: 010  and 000
# 000                   000      010
def successors3(board):
    # first find an empty column
    for c in range(0, N):
        if count_on_col(board, c) == 0:
            break

    succ = []
    if c != N:
        for r in range(0, N):
            if count_on_row(board, r) == 0:
                succ += [ add_piece(board, r, c), ]

    return succ

# check if board is a goal state
def is_goal(board):
    if count_pieces(board) != N:
        return False
    for r in range(0, N):
        if count_on_row(board, r) > 1:
            return False
    for c in range(0, N):
        if count_on_col(board, c) > 1:
            return False

    return True


# Solve n-rooks!
def solve(initial_board):
    fringe = [initial_board]
    while len(fringe) > 0:
        for s in successors3( fringe.pop() ):
            if is_goal(s):
                return(s)
            fringe.append(s)
    return False


####
# Part below is for n-queens
# Count # of pieces on a diagonal involving a given square
# (where dir is +1 for forward diagonal and -1 for backwards diagonal, e.g. like this:)
# -1:   +1:
# ////  \\\\
# ////  \\\\
# ////  \\\\
# ////  \\\\
def count_on_diag(board, row, col, dir):
    sum = 0
    for c in range(0, N):
        r = row - col*dir + c*dir
        if r >= 0 and r < N:
            sum += board[r][c]
    return sum


# Get list of successors of given board state.
# This version only returns successors that fill the next empty column of the board,
#  and do not conflict with any previously placed piece along any row or diagonal
def nqueens_successors(board):
    # first find an empty column
    for c in range(0, N):
        if count_on_col(board, c) == 0:
            break

    succ = []
    if c != N:
        for r in range(0, N):
            if count_on_row(board, r) == 0 and count_on_diag(board, r, c, 1) == 0 and count_on_diag(board, r, c, -1) == 0:
                succ += [ add_piece( board, r, c), ]
    return succ


# Since our successors function only generates potential goal states, we can just verify
# that the number of pieces on the board is N!
def nqueens_is_goal(board):
    return count_pieces(board) == N

def nqueens_solve(initial_board):
    # The fringe!
    fringe = [initial_board]

    # Main search loop!
    while len(fringe) > 0:
        for s in nqueens_successors( fringe.pop() ):
            if nqueens_is_goal(s):
                return(s)
            fringe.append(s)

    return False

# The board is stored as a list-of-lists. Each inner list is a row of the board.
# A zero in a given square indicates no piece, and a 1 indicates a piece.
initial_board = [[0]*N]*N
print "Starting from initial board:\n" + printable_board(initial_board) + "\n\n"

print "Looking for solution to n-rooks...\n"
solution = solve(initial_board)
print printable_board(solution) if solution else "Sorry, no solution found. :("

print "Looking for solution to n-queens...\n"
solution = nqueens_solve(initial_board)
print printable_board(solution) if solution else "Sorry, no solution found. :("

